<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.0.xsd">
             
             

  	<bean id = "dataSource" class ="com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">    
       <!-- 数据库基本信息配置 -->  
       <property name = "url" value ="jdbc:mysql://localhost:3306/ceshi" />    
       <property name = "username" value = "root" />    
       <property name = "password" value = "password" />    
<!-- 		<property name = "password" value = "root" /> -->
       <property name = "driverClassName" value = "${driverClassName}" />    
       <property name = "filters" value = "${filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />    
       <property name = "validationQuery" value = "${validationQuery}" />    
       <property name = "testWhileIdle" value = "${testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${testOnBorrow}" />    
       <property name = "testOnReturn" value = "${testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${logAbandoned}" />  
  </bean >
  
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/hcl/my/mapping/*.xml"></property>  
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.hcl.my.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
    
  
	 <!-- Memcached配置  -->    
	<bean id="memcachedClientBuilder"  
        class="net.rubyeye.xmemcached.XMemcachedClientBuilder"  
        p:connectionPoolSize="3" 
        p:failureMode="${memcached.failureMode}" >  
        <!-- XMemcachedClientBuilder have two arguments.First is server list,and   
            second is weights array. -->  
        <constructor-arg>  
            <list>  
                <bean class="java.net.InetSocketAddress">  
                    <constructor-arg>  
                        <value>${memcached.server1.host}</value>  
                    </constructor-arg>  
                    <constructor-arg>  
                        <value>${memcached.server1.port}</value>  
                    </constructor-arg>  
                </bean>  
<!--                 <bean class="java.net.InetSocketAddress">   -->
<!--                     <constructor-arg>   -->
<!--                         <value>${memcached.server2.host}</value>   -->
<!--                     </constructor-arg>   -->
<!--                     <constructor-arg>   -->
<!--                         <value>${memcached.server2.port}</value>   -->
<!--                     </constructor-arg>   -->
<!--                 </bean>   -->
<!--                 <bean class="java.net.InetSocketAddress">   -->
<!--                     <constructor-arg>   -->
<!--                         <value>${memcached.server3.host}</value>   -->
<!--                     </constructor-arg>   -->
<!--                     <constructor-arg>   -->
<!--                         <value>${memcached.server3.port}</value>   -->
<!--                     </constructor-arg>   -->
<!--                 </bean>   -->
<!--                 <bean class="java.net.InetSocketAddress">   -->
<!--                     <constructor-arg>   -->
<!--                         <value>${memcached.server4.host}</value>   -->
<!--                     </constructor-arg>   -->
<!--                     <constructor-arg>   -->
<!--                         <value>${memcached.server4.port}</value>   -->
<!--                     </constructor-arg>   -->
<!--                 </bean>   -->
            </list>  
        </constructor-arg>  
        <constructor-arg>  
            <list>  
                <value>${memcached.server1.weight}</value>  
<!--                 <value>${memcached.server2.weight}</value>   -->
<!--                 <value>${memcached.server3.weight}</value>   -->
<!--                 <value>${memcached.server4.weight}</value>   -->
            </list>  
        </constructor-arg>  
        <property name="commandFactory">  
            <bean class="net.rubyeye.xmemcached.command.TextCommandFactory" />  
        </property>  
        <property name="sessionLocator">  
            <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" />  
        </property>  
        <property name="transcoder">  
            <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />  
        </property>  
    </bean>  
    <!-- Use factory bean to build memcached client -->  
    <bean id="memcachedClient"  
        factory-bean="memcachedClientBuilder"  
        factory-method="build"  
        destroy-method="shutdown" /> 
	 
	 <!-- Memcached-Java-Client
    <bean id="memcachedPool" class="com.whalin.MemCached.SockIOPool"    
        factory-method="getInstance" init-method="initialize" destroy-method="shutDown">    
        <property name="servers">    
            <list>    
                <value>${memcached.server}</value>    
            </list>    
        </property>    
        <property name="initConn">    
            <value>${memcached.initConn}</value>    
        </property>    
        <property name="minConn">    
            <value>${memcached.minConn}</value>    
        </property>    
        <property name="maxConn">    
            <value>${memcached.maxConn}</value>    
        </property>    
        <property name="maintSleep">    
            <value>${memcached.maintSleep}</value>    
        </property>    
        <property name="nagle">    
            <value>${memcached.nagle}</value>    
        </property>    
        <property name="socketTO">    
            <value>${memcached.socketTO}</value>    
        </property>    
    </bean>   
 	-->
 	
 	
 	

</beans>